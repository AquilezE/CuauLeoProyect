//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cliente.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class UserDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProfilePictureIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReady {
            get {
                return this.IsReadyField;
            }
            set {
                if ((this.IsReadyField.Equals(value) != true)) {
                    this.IsReadyField = value;
                    this.RaisePropertyChanged("IsReady");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProfilePictureId {
            get {
                return this.ProfilePictureIdField;
            }
            set {
                if ((this.ProfilePictureIdField.Equals(value) != true)) {
                    this.ProfilePictureIdField = value;
                    this.RaisePropertyChanged("ProfilePictureId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FriendDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FriendIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FriendshipIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProfilePictureIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FriendId {
            get {
                return this.FriendIdField;
            }
            set {
                if ((this.FriendIdField.Equals(value) != true)) {
                    this.FriendIdField = value;
                    this.RaisePropertyChanged("FriendId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendName {
            get {
                return this.FriendNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendNameField, value) != true)) {
                    this.FriendNameField = value;
                    this.RaisePropertyChanged("FriendName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FriendshipId {
            get {
                return this.FriendshipIdField;
            }
            set {
                if ((this.FriendshipIdField.Equals(value) != true)) {
                    this.FriendshipIdField = value;
                    this.RaisePropertyChanged("FriendshipId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProfilePictureId {
            get {
                return this.ProfilePictureIdField;
            }
            set {
                if ((this.ProfilePictureIdField.Equals(value) != true)) {
                    this.ProfilePictureIdField = value;
                    this.RaisePropertyChanged("ProfilePictureId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequestDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FriendRequestDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FriendRequestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProfilePictureIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FriendRequestId {
            get {
                return this.FriendRequestIdField;
            }
            set {
                if ((this.FriendRequestIdField.Equals(value) != true)) {
                    this.FriendRequestIdField = value;
                    this.RaisePropertyChanged("FriendRequestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProfilePictureId {
            get {
                return this.ProfilePictureIdField;
            }
            set {
                if ((this.ProfilePictureIdField.Equals(value) != true)) {
                    this.ProfilePictureIdField = value;
                    this.RaisePropertyChanged("ProfilePictureId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlockedDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class BlockedDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlockIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlockedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlockerUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProfilePictureIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlockId {
            get {
                return this.BlockIdField;
            }
            set {
                if ((this.BlockIdField.Equals(value) != true)) {
                    this.BlockIdField = value;
                    this.RaisePropertyChanged("BlockId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlockedId {
            get {
                return this.BlockedIdField;
            }
            set {
                if ((this.BlockedIdField.Equals(value) != true)) {
                    this.BlockedIdField = value;
                    this.RaisePropertyChanged("BlockedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlockerUsername {
            get {
                return this.BlockerUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.BlockerUsernameField, value) != true)) {
                    this.BlockerUsernameField = value;
                    this.RaisePropertyChanged("BlockerUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProfilePictureId {
            get {
                return this.ProfilePictureIdField;
            }
            set {
                if ((this.ProfilePictureIdField.Equals(value) != true)) {
                    this.ProfilePictureIdField = value;
                    this.RaisePropertyChanged("ProfilePictureId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameStateDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class GameStateDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Cliente.ServiceReference.CardDTO[] BabyDeckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardsRemainingInDeckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentPlayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, int> PlayerActionsRemainingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TurnTimeRemainingInSecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, Cliente.ServiceReference.PlayerStateDTO> playerStateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cliente.ServiceReference.CardDTO[] BabyDeck {
            get {
                return this.BabyDeckField;
            }
            set {
                if ((object.ReferenceEquals(this.BabyDeckField, value) != true)) {
                    this.BabyDeckField = value;
                    this.RaisePropertyChanged("BabyDeck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardsRemainingInDeck {
            get {
                return this.CardsRemainingInDeckField;
            }
            set {
                if ((this.CardsRemainingInDeckField.Equals(value) != true)) {
                    this.CardsRemainingInDeckField = value;
                    this.RaisePropertyChanged("CardsRemainingInDeck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentPlayerId {
            get {
                return this.CurrentPlayerIdField;
            }
            set {
                if ((this.CurrentPlayerIdField.Equals(value) != true)) {
                    this.CurrentPlayerIdField = value;
                    this.RaisePropertyChanged("CurrentPlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameStateId {
            get {
                return this.GameStateIdField;
            }
            set {
                if ((this.GameStateIdField.Equals(value) != true)) {
                    this.GameStateIdField = value;
                    this.RaisePropertyChanged("GameStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, int> PlayerActionsRemaining {
            get {
                return this.PlayerActionsRemainingField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerActionsRemainingField, value) != true)) {
                    this.PlayerActionsRemainingField = value;
                    this.RaisePropertyChanged("PlayerActionsRemaining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TurnTimeRemainingInSeconds {
            get {
                return this.TurnTimeRemainingInSecondsField;
            }
            set {
                if ((this.TurnTimeRemainingInSecondsField.Equals(value) != true)) {
                    this.TurnTimeRemainingInSecondsField = value;
                    this.RaisePropertyChanged("TurnTimeRemainingInSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, Cliente.ServiceReference.PlayerStateDTO> playerState {
            get {
                return this.playerStateField;
            }
            set {
                if ((object.ReferenceEquals(this.playerStateField, value) != true)) {
                    this.playerStateField = value;
                    this.RaisePropertyChanged("playerState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class CardDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStateDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class PlayerStateDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Cliente.ServiceReference.CardDTO[] HandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Cliente.ServiceReference.MonsterDTO[] MonstersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Cliente.ServiceReference.UserDto UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cliente.ServiceReference.CardDTO[] Hand {
            get {
                return this.HandField;
            }
            set {
                if ((object.ReferenceEquals(this.HandField, value) != true)) {
                    this.HandField = value;
                    this.RaisePropertyChanged("Hand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cliente.ServiceReference.MonsterDTO[] Monsters {
            get {
                return this.MonstersField;
            }
            set {
                if ((object.ReferenceEquals(this.MonstersField, value) != true)) {
                    this.MonstersField = value;
                    this.RaisePropertyChanged("Monsters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cliente.ServiceReference.UserDto User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonsterDTO", Namespace="http://schemas.datacontract.org/2004/07/BevososService.DTOs")]
    [System.SerializableAttribute()]
    public partial class MonsterDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Cliente.ServiceReference.CardDTO[] bodyPartsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cliente.ServiceReference.CardDTO[] bodyParts {
            get {
                return this.bodyPartsField;
            }
            set {
                if ((object.ReferenceEquals(this.bodyPartsField, value) != true)) {
                    this.bodyPartsField = value;
                    this.RaisePropertyChanged("bodyParts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUsersManager")]
    public interface IUsersManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUsernameTaken", ReplyAction="http://tempuri.org/IUsersManager/IsUsernameTakenResponse")]
        bool IsUsernameTaken(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsUsernameTaken", ReplyAction="http://tempuri.org/IUsersManager/IsUsernameTakenResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameTakenAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsEmailTaken", ReplyAction="http://tempuri.org/IUsersManager/IsEmailTakenResponse")]
        bool IsEmailTaken(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/IsEmailTaken", ReplyAction="http://tempuri.org/IUsersManager/IsEmailTakenResponse")]
        System.Threading.Tasks.Task<bool> IsEmailTakenAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/SendToken", ReplyAction="http://tempuri.org/IUsersManager/SendTokenResponse")]
        bool SendToken(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/SendToken", ReplyAction="http://tempuri.org/IUsersManager/SendTokenResponse")]
        System.Threading.Tasks.Task<bool> SendTokenAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/VerifyToken", ReplyAction="http://tempuri.org/IUsersManager/VerifyTokenResponse")]
        bool VerifyToken(string email, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/VerifyToken", ReplyAction="http://tempuri.org/IUsersManager/VerifyTokenResponse")]
        System.Threading.Tasks.Task<bool> VerifyTokenAsync(string email, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/RegisterUser", ReplyAction="http://tempuri.org/IUsersManager/RegisterUserResponse")]
        bool RegisterUser(string email, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/RegisterUser", ReplyAction="http://tempuri.org/IUsersManager/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/LogIn", ReplyAction="http://tempuri.org/IUsersManager/LogInResponse")]
        Cliente.ServiceReference.UserDto LogIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/LogIn", ReplyAction="http://tempuri.org/IUsersManager/LogInResponse")]
        System.Threading.Tasks.Task<Cliente.ServiceReference.UserDto> LogInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/RecoverPassword", ReplyAction="http://tempuri.org/IUsersManager/RecoverPasswordResponse")]
        bool RecoverPassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/RecoverPassword", ReplyAction="http://tempuri.org/IUsersManager/RecoverPasswordResponse")]
        System.Threading.Tasks.Task<bool> RecoverPasswordAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersManagerChannel : Cliente.ServiceReference.IUsersManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsersManagerClient : System.ServiceModel.ClientBase<Cliente.ServiceReference.IUsersManager>, Cliente.ServiceReference.IUsersManager {
        
        public UsersManagerClient() {
        }
        
        public UsersManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UsersManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsUsernameTaken(string username) {
            return base.Channel.IsUsernameTaken(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameTakenAsync(string username) {
            return base.Channel.IsUsernameTakenAsync(username);
        }
        
        public bool IsEmailTaken(string email) {
            return base.Channel.IsEmailTaken(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailTakenAsync(string email) {
            return base.Channel.IsEmailTakenAsync(email);
        }
        
        public bool SendToken(string email) {
            return base.Channel.SendToken(email);
        }
        
        public System.Threading.Tasks.Task<bool> SendTokenAsync(string email) {
            return base.Channel.SendTokenAsync(email);
        }
        
        public bool VerifyToken(string email, string token) {
            return base.Channel.VerifyToken(email, token);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyTokenAsync(string email, string token) {
            return base.Channel.VerifyTokenAsync(email, token);
        }
        
        public bool RegisterUser(string email, string username, string password) {
            return base.Channel.RegisterUser(email, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string username, string password) {
            return base.Channel.RegisterUserAsync(email, username, password);
        }
        
        public Cliente.ServiceReference.UserDto LogIn(string email, string password) {
            return base.Channel.LogIn(email, password);
        }
        
        public System.Threading.Tasks.Task<Cliente.ServiceReference.UserDto> LogInAsync(string email, string password) {
            return base.Channel.LogInAsync(email, password);
        }
        
        public bool RecoverPassword(string email, string password) {
            return base.Channel.RecoverPassword(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> RecoverPasswordAsync(string email, string password) {
            return base.Channel.RecoverPasswordAsync(email, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILobbyManager", CallbackContract=typeof(Cliente.ServiceReference.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/NewLobbyCreated")]
        void NewLobbyCreated(Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/NewLobbyCreated")]
        System.Threading.Tasks.Task NewLobbyCreatedAsync(Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobby")]
        void JoinLobby(int lobbyId, Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobby")]
        System.Threading.Tasks.Task JoinLobbyAsync(int lobbyId, Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/LeaveLobby")]
        void LeaveLobby(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/LeaveLobby")]
        System.Threading.Tasks.Task LeaveLobbyAsync(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendMessage")]
        void SendMessage(int lobbyId, int userId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(int lobbyId, int userId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/KickUser")]
        void KickUser(int lobbyId, int kickerId, int targetUserId, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/KickUser")]
        System.Threading.Tasks.Task KickUserAsync(int lobbyId, int kickerId, int targetUserId, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartGame")]
        void StartGame(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ChangeReadyStatus")]
        void ChangeReadyStatus(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ChangeReadyStatus")]
        System.Threading.Tasks.Task ChangeReadyStatusAsync(int lobbyId, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnNewLobbyCreated")]
        void OnNewLobbyCreated(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnLobbyUsersUpdate")]
        void OnLobbyUsersUpdate(int lobbyId, Cliente.ServiceReference.UserDto[] existingUsers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnLeaderChanged")]
        void OnLeaderChanged(int lobbyId, int newLeaderId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnJoinLobby")]
        void OnJoinLobby(int lobbyId, Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnLeaveLobby")]
        void OnLeaveLobby(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnKicked")]
        void OnKicked(int lobbyId, string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnSendMessage")]
        void OnSendMessage(int userId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/OnReadyStatusChanged")]
        void OnReadyStatusChanged(int userId, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/GameStarted")]
        void GameStarted(int gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : Cliente.ServiceReference.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<Cliente.ServiceReference.ILobbyManager>, Cliente.ServiceReference.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void NewLobbyCreated(Cliente.ServiceReference.UserDto userDto) {
            base.Channel.NewLobbyCreated(userDto);
        }
        
        public System.Threading.Tasks.Task NewLobbyCreatedAsync(Cliente.ServiceReference.UserDto userDto) {
            return base.Channel.NewLobbyCreatedAsync(userDto);
        }
        
        public void JoinLobby(int lobbyId, Cliente.ServiceReference.UserDto userDto) {
            base.Channel.JoinLobby(lobbyId, userDto);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsync(int lobbyId, Cliente.ServiceReference.UserDto userDto) {
            return base.Channel.JoinLobbyAsync(lobbyId, userDto);
        }
        
        public void LeaveLobby(int lobbyId, int userId) {
            base.Channel.LeaveLobby(lobbyId, userId);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(int lobbyId, int userId) {
            return base.Channel.LeaveLobbyAsync(lobbyId, userId);
        }
        
        public void SendMessage(int lobbyId, int userId, string message) {
            base.Channel.SendMessage(lobbyId, userId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(int lobbyId, int userId, string message) {
            return base.Channel.SendMessageAsync(lobbyId, userId, message);
        }
        
        public void KickUser(int lobbyId, int kickerId, int targetUserId, string reason) {
            base.Channel.KickUser(lobbyId, kickerId, targetUserId, reason);
        }
        
        public System.Threading.Tasks.Task KickUserAsync(int lobbyId, int kickerId, int targetUserId, string reason) {
            return base.Channel.KickUserAsync(lobbyId, kickerId, targetUserId, reason);
        }
        
        public void StartGame(int lobbyId) {
            base.Channel.StartGame(lobbyId);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(int lobbyId) {
            return base.Channel.StartGameAsync(lobbyId);
        }
        
        public void ChangeReadyStatus(int lobbyId, int userId) {
            base.Channel.ChangeReadyStatus(lobbyId, userId);
        }
        
        public System.Threading.Tasks.Task ChangeReadyStatusAsync(int lobbyId, int userId) {
            return base.Channel.ChangeReadyStatusAsync(lobbyId, userId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILobbyChecker")]
    public interface ILobbyChecker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyChecker/IsLobbyOpen", ReplyAction="http://tempuri.org/ILobbyChecker/IsLobbyOpenResponse")]
        bool IsLobbyOpen(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyChecker/IsLobbyOpen", ReplyAction="http://tempuri.org/ILobbyChecker/IsLobbyOpenResponse")]
        System.Threading.Tasks.Task<bool> IsLobbyOpenAsync(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyChecker/IsLobbyFull", ReplyAction="http://tempuri.org/ILobbyChecker/IsLobbyFullResponse")]
        bool IsLobbyFull(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyChecker/IsLobbyFull", ReplyAction="http://tempuri.org/ILobbyChecker/IsLobbyFullResponse")]
        System.Threading.Tasks.Task<bool> IsLobbyFullAsync(int lobbyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyCheckerChannel : Cliente.ServiceReference.ILobbyChecker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyCheckerClient : System.ServiceModel.ClientBase<Cliente.ServiceReference.ILobbyChecker>, Cliente.ServiceReference.ILobbyChecker {
        
        public LobbyCheckerClient() {
        }
        
        public LobbyCheckerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LobbyCheckerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyCheckerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyCheckerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsLobbyOpen(int lobbyId) {
            return base.Channel.IsLobbyOpen(lobbyId);
        }
        
        public System.Threading.Tasks.Task<bool> IsLobbyOpenAsync(int lobbyId) {
            return base.Channel.IsLobbyOpenAsync(lobbyId);
        }
        
        public bool IsLobbyFull(int lobbyId) {
            return base.Channel.IsLobbyFull(lobbyId);
        }
        
        public System.Threading.Tasks.Task<bool> IsLobbyFullAsync(int lobbyId) {
            return base.Channel.IsLobbyFullAsync(lobbyId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IProfileManager", CallbackContract=typeof(Cliente.ServiceReference.IProfileManagerCallback))]
    public interface IProfileManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProfileManager/UpdateProfile")]
        void UpdateProfile(int userId, string username, int profilePictureId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProfileManager/UpdateProfile")]
        System.Threading.Tasks.Task UpdateProfileAsync(int userId, string username, int profilePictureId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProfileManager/ChangePassword")]
        void ChangePassword(int userId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProfileManager/ChangePassword")]
        System.Threading.Tasks.Task ChangePasswordAsync(int userId, string oldPassword, string newPassword);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProfileManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProfileManager/OnProfileUpdate")]
        void OnProfileUpdate(string username, int profilePictureId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProfileManager/OnPasswordChange")]
        void OnPasswordChange(string result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProfileManagerChannel : Cliente.ServiceReference.IProfileManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProfileManagerClient : System.ServiceModel.DuplexClientBase<Cliente.ServiceReference.IProfileManager>, Cliente.ServiceReference.IProfileManager {
        
        public ProfileManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ProfileManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ProfileManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void UpdateProfile(int userId, string username, int profilePictureId) {
            base.Channel.UpdateProfile(userId, username, profilePictureId);
        }
        
        public System.Threading.Tasks.Task UpdateProfileAsync(int userId, string username, int profilePictureId) {
            return base.Channel.UpdateProfileAsync(userId, username, profilePictureId);
        }
        
        public void ChangePassword(int userId, string oldPassword, string newPassword) {
            base.Channel.ChangePassword(userId, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(int userId, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(userId, oldPassword, newPassword);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISocialManager", CallbackContract=typeof(Cliente.ServiceReference.ISocialManagerCallback))]
    public interface ISocialManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/Connect")]
        void Connect(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/Connect")]
        System.Threading.Tasks.Task ConnectAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/Disconnect")]
        void Disconnect(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/IsConnected", ReplyAction="http://tempuri.org/ISocialManager/IsConnectedResponse")]
        bool IsConnected(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/IsConnected", ReplyAction="http://tempuri.org/ISocialManager/IsConnectedResponse")]
        System.Threading.Tasks.Task<bool> IsConnectedAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/SendFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/SendFriendRequestResponse")]
        bool SendFriendRequest(int userId, int requesteeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/SendFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> SendFriendRequestAsync(int userId, int requesteeId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/AcceptFriendRequest")]
        void AcceptFriendRequest(int userId, int friendId, int requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(int userId, int friendId, int requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/DeclineFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/DeclineFriendRequestResponse")]
        bool DeclineFriendRequest(int requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/DeclineFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/DeclineFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> DeclineFriendRequestAsync(int requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/BlockFriend", ReplyAction="http://tempuri.org/ISocialManager/BlockFriendResponse")]
        bool BlockFriend(int userId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/BlockFriend", ReplyAction="http://tempuri.org/ISocialManager/BlockFriendResponse")]
        System.Threading.Tasks.Task<bool> BlockFriendAsync(int userId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/UnblockUser", ReplyAction="http://tempuri.org/ISocialManager/UnblockUserResponse")]
        bool UnblockUser(int userId, int blockedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/UnblockUser", ReplyAction="http://tempuri.org/ISocialManager/UnblockUserResponse")]
        System.Threading.Tasks.Task<bool> UnblockUserAsync(int userId, int blockedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/BlockUser", ReplyAction="http://tempuri.org/ISocialManager/BlockUserResponse")]
        bool BlockUser(int userId, int blockeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/BlockUser", ReplyAction="http://tempuri.org/ISocialManager/BlockUserResponse")]
        System.Threading.Tasks.Task<bool> BlockUserAsync(int userId, int blockeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/DeleteFriend", ReplyAction="http://tempuri.org/ISocialManager/DeleteFriendResponse")]
        bool DeleteFriend(int userId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/DeleteFriend", ReplyAction="http://tempuri.org/ISocialManager/DeleteFriendResponse")]
        System.Threading.Tasks.Task<bool> DeleteFriendAsync(int userId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetFriends", ReplyAction="http://tempuri.org/ISocialManager/GetFriendsResponse")]
        Cliente.ServiceReference.FriendDTO[] GetFriends(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetFriends", ReplyAction="http://tempuri.org/ISocialManager/GetFriendsResponse")]
        System.Threading.Tasks.Task<Cliente.ServiceReference.FriendDTO[]> GetFriendsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetFriendRequests", ReplyAction="http://tempuri.org/ISocialManager/GetFriendRequestsResponse")]
        Cliente.ServiceReference.FriendRequestDTO[] GetFriendRequests(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetFriendRequests", ReplyAction="http://tempuri.org/ISocialManager/GetFriendRequestsResponse")]
        System.Threading.Tasks.Task<Cliente.ServiceReference.FriendRequestDTO[]> GetFriendRequestsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetBlockedUsers", ReplyAction="http://tempuri.org/ISocialManager/GetBlockedUsersResponse")]
        Cliente.ServiceReference.BlockedDTO[] GetBlockedUsers(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetBlockedUsers", ReplyAction="http://tempuri.org/ISocialManager/GetBlockedUsersResponse")]
        System.Threading.Tasks.Task<Cliente.ServiceReference.BlockedDTO[]> GetBlockedUsersAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetUsersFoundByName", ReplyAction="http://tempuri.org/ISocialManager/GetUsersFoundByNameResponse")]
        Cliente.ServiceReference.UserDto[] GetUsersFoundByName(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/GetUsersFoundByName", ReplyAction="http://tempuri.org/ISocialManager/GetUsersFoundByNameResponse")]
        System.Threading.Tasks.Task<Cliente.ServiceReference.UserDto[]> GetUsersFoundByNameAsync(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/InviteFriendToLobby")]
        void InviteFriendToLobby(string inviterName, int userId, int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/InviteFriendToLobby")]
        System.Threading.Tasks.Task InviteFriendToLobbyAsync(string inviterName, int userId, int lobbyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISocialManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/OnFriendOnline")]
        void OnFriendOnline(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/OnFriendOffline")]
        void OnFriendOffline(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/OnNewFriend")]
        void OnNewFriend(Cliente.ServiceReference.FriendDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/OnFriendshipDeleted")]
        void OnFriendshipDeleted(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/OnNewFriendRequest")]
        void OnNewFriendRequest(Cliente.ServiceReference.FriendRequestDTO friendRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/NotifyGameInvited")]
        void NotifyGameInvited(string inviterName, int lobbyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISocialManagerChannel : Cliente.ServiceReference.ISocialManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SocialManagerClient : System.ServiceModel.DuplexClientBase<Cliente.ServiceReference.ISocialManager>, Cliente.ServiceReference.ISocialManager {
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(int userId) {
            base.Channel.Connect(userId);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(int userId) {
            return base.Channel.ConnectAsync(userId);
        }
        
        public void Disconnect(int userId) {
            base.Channel.Disconnect(userId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int userId) {
            return base.Channel.DisconnectAsync(userId);
        }
        
        public bool IsConnected(string email) {
            return base.Channel.IsConnected(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsConnectedAsync(string email) {
            return base.Channel.IsConnectedAsync(email);
        }
        
        public bool SendFriendRequest(int userId, int requesteeId) {
            return base.Channel.SendFriendRequest(userId, requesteeId);
        }
        
        public System.Threading.Tasks.Task<bool> SendFriendRequestAsync(int userId, int requesteeId) {
            return base.Channel.SendFriendRequestAsync(userId, requesteeId);
        }
        
        public void AcceptFriendRequest(int userId, int friendId, int requestId) {
            base.Channel.AcceptFriendRequest(userId, friendId, requestId);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(int userId, int friendId, int requestId) {
            return base.Channel.AcceptFriendRequestAsync(userId, friendId, requestId);
        }
        
        public bool DeclineFriendRequest(int requestId) {
            return base.Channel.DeclineFriendRequest(requestId);
        }
        
        public System.Threading.Tasks.Task<bool> DeclineFriendRequestAsync(int requestId) {
            return base.Channel.DeclineFriendRequestAsync(requestId);
        }
        
        public bool BlockFriend(int userId, int friendId) {
            return base.Channel.BlockFriend(userId, friendId);
        }
        
        public System.Threading.Tasks.Task<bool> BlockFriendAsync(int userId, int friendId) {
            return base.Channel.BlockFriendAsync(userId, friendId);
        }
        
        public bool UnblockUser(int userId, int blockedId) {
            return base.Channel.UnblockUser(userId, blockedId);
        }
        
        public System.Threading.Tasks.Task<bool> UnblockUserAsync(int userId, int blockedId) {
            return base.Channel.UnblockUserAsync(userId, blockedId);
        }
        
        public bool BlockUser(int userId, int blockeeId) {
            return base.Channel.BlockUser(userId, blockeeId);
        }
        
        public System.Threading.Tasks.Task<bool> BlockUserAsync(int userId, int blockeeId) {
            return base.Channel.BlockUserAsync(userId, blockeeId);
        }
        
        public bool DeleteFriend(int userId, int friendId) {
            return base.Channel.DeleteFriend(userId, friendId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFriendAsync(int userId, int friendId) {
            return base.Channel.DeleteFriendAsync(userId, friendId);
        }
        
        public Cliente.ServiceReference.FriendDTO[] GetFriends(int userId) {
            return base.Channel.GetFriends(userId);
        }
        
        public System.Threading.Tasks.Task<Cliente.ServiceReference.FriendDTO[]> GetFriendsAsync(int userId) {
            return base.Channel.GetFriendsAsync(userId);
        }
        
        public Cliente.ServiceReference.FriendRequestDTO[] GetFriendRequests(int userId) {
            return base.Channel.GetFriendRequests(userId);
        }
        
        public System.Threading.Tasks.Task<Cliente.ServiceReference.FriendRequestDTO[]> GetFriendRequestsAsync(int userId) {
            return base.Channel.GetFriendRequestsAsync(userId);
        }
        
        public Cliente.ServiceReference.BlockedDTO[] GetBlockedUsers(int userId) {
            return base.Channel.GetBlockedUsers(userId);
        }
        
        public System.Threading.Tasks.Task<Cliente.ServiceReference.BlockedDTO[]> GetBlockedUsersAsync(int userId) {
            return base.Channel.GetBlockedUsersAsync(userId);
        }
        
        public Cliente.ServiceReference.UserDto[] GetUsersFoundByName(int userId, string name) {
            return base.Channel.GetUsersFoundByName(userId, name);
        }
        
        public System.Threading.Tasks.Task<Cliente.ServiceReference.UserDto[]> GetUsersFoundByNameAsync(int userId, string name) {
            return base.Channel.GetUsersFoundByNameAsync(userId, name);
        }
        
        public void InviteFriendToLobby(string inviterName, int userId, int lobbyId) {
            base.Channel.InviteFriendToLobby(inviterName, userId, lobbyId);
        }
        
        public System.Threading.Tasks.Task InviteFriendToLobbyAsync(string inviterName, int userId, int lobbyId) {
            return base.Channel.InviteFriendToLobbyAsync(inviterName, userId, lobbyId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IGameManager", CallbackContract=typeof(Cliente.ServiceReference.IGameManagerCallback))]
    public interface IGameManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/JoinGame")]
        void JoinGame(int gameId, Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/JoinGame")]
        System.Threading.Tasks.Task JoinGameAsync(int gameId, Cliente.ServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/DrawCard")]
        void DrawCard(int matchCode, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/DrawCard")]
        System.Threading.Tasks.Task DrawCardAsync(int matchCode, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/PlayCard")]
        void PlayCard(int userId, int matchCode, int cardId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/PlayCard")]
        System.Threading.Tasks.Task PlayCardAsync(int userId, int matchCode, int cardId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/PlayProvoke")]
        void PlayProvoke(int userId, int matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/PlayProvoke")]
        System.Threading.Tasks.Task PlayProvokeAsync(int userId, int matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteBodyPartPlacement")]
        void ExecuteBodyPartPlacement(int userId, int matchCode, int cardId, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteBodyPartPlacement")]
        System.Threading.Tasks.Task ExecuteBodyPartPlacementAsync(int userId, int matchCode, int cardId, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteToolPlacement")]
        void ExecuteToolPlacement(int userId, int matchCode, int cardId, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteToolPlacement")]
        System.Threading.Tasks.Task ExecuteToolPlacementAsync(int userId, int matchCode, int cardId, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteHatPlacement")]
        void ExecuteHatPlacement(int userId, int matchCode, int cardId, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteHatPlacement")]
        System.Threading.Tasks.Task ExecuteHatPlacementAsync(int userId, int matchCode, int cardId, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteProvoke")]
        void ExecuteProvoke(int userId, int matchCode, int monsterSelectedIndex);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ExecuteProvoke")]
        System.Threading.Tasks.Task ExecuteProvokeAsync(int userId, int matchCode, int monsterSelectedIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ReceiveGameState")]
        void ReceiveGameState(Cliente.ServiceReference.GameStateDTO gameStateDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RequestBodyPartSelection")]
        void RequestBodyPartSelection(int userId, int matchCode, Cliente.ServiceReference.CardDTO card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RequestToolSelection")]
        void RequestToolSelection(int userId, int matchCode, Cliente.ServiceReference.CardDTO card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RequestHatSelection")]
        void RequestHatSelection(int userId, int matchCode, Cliente.ServiceReference.CardDTO card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RequestProvokeSelection")]
        void RequestProvokeSelection(int userId, int matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyActionInvalid")]
        void NotifyActionInvalid(string messageKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerChannel : Cliente.ServiceReference.IGameManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerClient : System.ServiceModel.DuplexClientBase<Cliente.ServiceReference.IGameManager>, Cliente.ServiceReference.IGameManager {
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void JoinGame(int gameId, Cliente.ServiceReference.UserDto userDto) {
            base.Channel.JoinGame(gameId, userDto);
        }
        
        public System.Threading.Tasks.Task JoinGameAsync(int gameId, Cliente.ServiceReference.UserDto userDto) {
            return base.Channel.JoinGameAsync(gameId, userDto);
        }
        
        public void DrawCard(int matchCode, int userId) {
            base.Channel.DrawCard(matchCode, userId);
        }
        
        public System.Threading.Tasks.Task DrawCardAsync(int matchCode, int userId) {
            return base.Channel.DrawCardAsync(matchCode, userId);
        }
        
        public void PlayCard(int userId, int matchCode, int cardId) {
            base.Channel.PlayCard(userId, matchCode, cardId);
        }
        
        public System.Threading.Tasks.Task PlayCardAsync(int userId, int matchCode, int cardId) {
            return base.Channel.PlayCardAsync(userId, matchCode, cardId);
        }
        
        public void PlayProvoke(int userId, int matchCode) {
            base.Channel.PlayProvoke(userId, matchCode);
        }
        
        public System.Threading.Tasks.Task PlayProvokeAsync(int userId, int matchCode) {
            return base.Channel.PlayProvokeAsync(userId, matchCode);
        }
        
        public void ExecuteBodyPartPlacement(int userId, int matchCode, int cardId, int monsterSelectedIndex) {
            base.Channel.ExecuteBodyPartPlacement(userId, matchCode, cardId, monsterSelectedIndex);
        }
        
        public System.Threading.Tasks.Task ExecuteBodyPartPlacementAsync(int userId, int matchCode, int cardId, int monsterSelectedIndex) {
            return base.Channel.ExecuteBodyPartPlacementAsync(userId, matchCode, cardId, monsterSelectedIndex);
        }
        
        public void ExecuteToolPlacement(int userId, int matchCode, int cardId, int monsterSelectedIndex) {
            base.Channel.ExecuteToolPlacement(userId, matchCode, cardId, monsterSelectedIndex);
        }
        
        public System.Threading.Tasks.Task ExecuteToolPlacementAsync(int userId, int matchCode, int cardId, int monsterSelectedIndex) {
            return base.Channel.ExecuteToolPlacementAsync(userId, matchCode, cardId, monsterSelectedIndex);
        }
        
        public void ExecuteHatPlacement(int userId, int matchCode, int cardId, int monsterSelectedIndex) {
            base.Channel.ExecuteHatPlacement(userId, matchCode, cardId, monsterSelectedIndex);
        }
        
        public System.Threading.Tasks.Task ExecuteHatPlacementAsync(int userId, int matchCode, int cardId, int monsterSelectedIndex) {
            return base.Channel.ExecuteHatPlacementAsync(userId, matchCode, cardId, monsterSelectedIndex);
        }
        
        public void ExecuteProvoke(int userId, int matchCode, int monsterSelectedIndex) {
            base.Channel.ExecuteProvoke(userId, matchCode, monsterSelectedIndex);
        }
        
        public System.Threading.Tasks.Task ExecuteProvokeAsync(int userId, int matchCode, int monsterSelectedIndex) {
            return base.Channel.ExecuteProvokeAsync(userId, matchCode, monsterSelectedIndex);
        }
    }
}
